---
import Layout from "@/layouts/Layout.astro"
import { currentEvent, sql } from "@/util/db.ts"
import { days } from "@/util/dates"
import type { Registration } from "@/util/types"

const registrations = (await sql`select *
                                 from registration
                                 where registered
                                   and event_id = ${currentEvent.id}
                                 order by date desc`) as Registration[]

const total = registrations.reduce(
  (acc, current) => acc.map((x, index) => x + (current.days[index] ? 1 : 0)),
  Array(days.length).fill(0) as number[],
)

const max = Math.max(...total)
const params = Astro.url.searchParams
---

<Layout title="Joueurs inscrits">
  <div class="container">
    {
      params.has("registration") && (
        <div class="confirmation">
          {params.get("registration") === "new" && <p>Tu es inscrit(e) √† la LAN&nbsp;!</p>}
          {params.get("registration") === "updated" && <p>Ton inscription a √©t√© mise √† jour</p>}
        </div>
      )
    }
    {
      registrations.length > 0 ? (
        <>
          <h2>Joueurs inscrits</h2>
          <table>
            <tr>
              <td colspan="2" />
              {days.map(day => (
                <th>
                  {day.toLocaleDateString("fr-CH", {
                    day: "numeric",
                    month: "short",
                  })}
                </th>
              ))}
            </tr>
            {registrations.length > 1 && (
              <>
                <tr>
                  <th colspan="2">üë•</th>
                  {total.map(count => (
                    <td style={{ opacity: count / max }} class="count">
                      {count}
                    </td>
                  ))}
                </tr>
                <tr class="spacer" />
              </>
            )}
            {registrations.map(registration => (
              <tr>
                <th title={"Inscrit le " + registration.date.toLocaleString("fr-CH")}>{registration.name}</th>
                <td>
                  {registration.hardware.pc && "üñ•Ô∏è"}
                  {registration.hardware.laptop && "üíª"}
                  {registration.hardware.console && "üéÆ"}
                </td>
                {registration.days.map(day => (
                  <td class={day ? "yes" : null}>{day && "‚úîÔ∏è"}</td>
                ))}
              </tr>
            ))}
          </table>
        </>
      ) : (
        <>
          <h2>Aucun joueur inscrit</h2>
          <p>Pour l'instant&hellip;</p>
        </>
      )
    }
    <a href="/">Retour</a>
  </div>
</Layout>

<style>
  .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
  }

  h2 {
    margin: 0;
    text-transform: uppercase;
    font-style: italic;
  }

  table {
    display: block;
    border-collapse: collapse;
    margin: auto;
    padding-bottom: 1rem;
    overflow-x: auto;
    scrollbar-color: #fff8 transparent;
    max-width: 100%;
    font-size: min(0.9em, 4.2vw);
  }

  th,
  td {
    text-align: center;
    vertical-align: middle;
    padding: 0.5rem;
    white-space: nowrap;
  }

  :is(th, td):not(:last-child, :first-child) {
    border-right: 1px solid #fff5;
  }

  td.yes,
  td.count {
    background-color: rgba(100, 149, 237, 0.52);
  }

  .spacer {
    height: 1.5rem;
    border-top: 1px solid #fff5;
    border-bottom: 1px solid #fff5;
  }

  .confirmation {
    font-size: 1.2em;
    animation: appear 1s cubic-bezier(0.59, 0.33, 0.16, 1.27);
  }

  @keyframes appear {
    from {
      opacity: 0;
      transform: scale(0.2);
    }

    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>
